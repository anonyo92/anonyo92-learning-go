[PROJECT STRUCTURE]
    1. Single-module project
    /myapp                      # project-root == repository-root == module-root
        - go.mod 
        - go.sum
        /main                   # main package
            - main.go           # contains main() function; exec starts here. File-name need not be main.go.
            - otherSrc.go
        /helpers                # another package; can export vars/functions to be imported in other packages.
            - helper01.go
            - helper02.go
        /ui
        /cmd
        ...
    
    2. Multi-module project
    /myProject                  # project-root == repository-root
        /app01                  # module-root
            - go.mod
            - go.sum
            /main               # main package for this module
                - main.go       # contains main() function; exec of this app starts here.
                - otherSrc01.go
            /helpers            # another package; can export vars/functions to be imported in other packages.
                - helper01.go
                - helper02.go

        /app02                  # module-root
            - go.mod
            - go.sum
            /main               # main package for this module
                - main.go       # contains main() function; exec of this app starts here.
                - otherSrc01.go
            /helpers            # another package; can export vars/functions to be imported in other packages.
                - helper01.go
                - helper02.go

        /shared-mod
            - go.mod
            - go.sum
            /helpers            # another package; can export vars/functions to be imported in other packages.
                - helper01.go
                - helper02.go


[INIT]
1. Go to your application/module root dir, and initialize it as a go module:
    > cd myapp
    > go mod init myapp
    This will create a go.mod file with module name and go version 

[CLEAN]
    To clean any object files in the current directory left over from previous builds, we use:
        > go clean

[BUILD]
    To compile a package and its dependencies, we use:
        > go build 
    Note: build does not install the results.

[RUN]
1. There must be a main file (conventionally named "main.go", though not necessary) in the "main" package
    which implements the main() function. This is the entrypoint for the application.
    There can be only one main package in an application (in a module?)
    
        > go run main.go        # compiles (to an executable binary) and runs the program

    Non-main packages cannot be run (even if we define a main() function in it).

Code can be organized into multiple .go files within the same package, and multiple packages in the module.

(I) Single Module :: Single-Package :: Multiple source files:
    a) Functions and variables across multiple .go files within the same package are shareable/accessible.
        However, while running the application, we need to provide all the dependencies inline like:
            > go run main.go helper.go validations.go       # similar to JAVA classpath and dependent jars
    b) If there are many dependent files in a package, we can use the following shorthand 
        to include all files in the directory containing the main file, as dependencies:
            > go run .      
        We need to create a directory for each package (named the same as the package-name),
            and organize all dependencies (.go files) of that package in the package directory.
            Only the main package does not need a directory of its own - the main.go can be at the module root.

(II) Single Module :: Multiple-Packages :: Multiple source files:
    a) We can also share code across multiple packages. But for that, we need to:
        i)  Export the variables/functions from the package where they are defined, 
            by capitalizing the first letter of their names (like Printf() of the fmt package), and
        ii) Import the package into the package where these exported code will be used,
            via the path "<module-name>/<package-name>" like import "myapp/helper", and
            using them with package-qualified notation like helper.SomeExportedVar, helper.SomeExportedFn(), etc.
    b) There can only be one "main" package however in a go-module, 
        and the execution will always begin from the main() function of the "main" package.

(III) Multiple Modules in the project:
    We can also share code from packages across multiple go-modules. But for that, we need to:
        i)      Import the package into our package as usual.
        ii)     Declare the package dependency from the other module in this module's go.mod file.
        iii)    Fetch the dependencies using "go get"
        iv)     Build and Install the dependencies using "go install"
    We would create go-modules if we want some packages to be shared across multiple projects.
    So, we would publish related packages and their dependencies versioned together as a single unit - a go-module.

    [BACKGROUND: Go Modules]
    a) Go modules are the official way of dependency-management in Go.
        A Go module is a collection of related packages and their dependencies versioned together as a single unit.
        Typically, we have only 1 module in a repository, rooted at the repo-root itself.
        i)      We can initialize a directory as a go-module using:
                    > go mod init <module-name>
                    like, "go mod init example.com/myapp"
                This will generate the go.mod file with the module name and the go version.

        ii)     DECLARING DEPENDENCIES
                We can add module dependencies for our module in our module's go.mod file using `require`
                    like "require (
                            k8s.io/apimachinery v0.24.2
                            k8s.io/client-go v0.24.2
                         )"

        iii)    FETCHING DEPENDENCIES
                1. We can download dependencies using:
                    > go get <module-name>/<pkg-name>
                    like "go get example.com/pkg"
                    This will check the version specified in the go.mod file in this module directory,
                    else download the latest version of this dependency (and add it to the go.mod file?).
                2. To fetch specific versions, add the version after `@` at the end of the dependency, like:
                    "go get example.com/pkg@v1.2.3"
                3. To fetch all dependencies of this package, run get without naming any dependency, 
                    from the package directory:
                    package-dir> go get .
                4. To fetch all dependencies declared in the go.mod file for this module, run get without 
                    naming any dependency, from the module root directory:
                    module-root> go get .
                5. Modules are fetched from internet. 
                    i)  We can configure proxy servers (comma-separated list) in the GOPROXY env variable.
                    ii) We can configure private servers (comma-separated list) in the GOPRIVATE env variable.

        iv)     INSTALLING DEPENDENCIES
                go get also builds and installs the dependencies currently, but building and installing
                packages with get is deprecated, and will in future be only used to adjust dependencies
                of the current module. For build and install, we use:
                    > go install example.com/pkg
                When a version is specified, 'go install' runs in module-aware mode and ignores
                the go.mod file in the current directory. For example:
                    > go install example.com/pkg@v1.2.3
                    > go install example.com/pkg@latest

        v)      TIDYING MODULES
                    > go mod tidy
                Tidy makes sure go.mod matches the source code in the module.
                It adds any missing modules necessary to build the current module's
                packages and dependencies, and it removes unused modules that
                don't provide any relevant packages. It also adds any missing entries
                to go.sum and removes any unnecessary ones.

    b) We can refer to local module on the same filesystem as a dependency of another module
        by 'replacing' its reference in the go.mod file to the local path, like:
            require example.com/somemodule v0.0.0-unpublished
            replace example.com/somemodule v0.0.0-unpublished => ../mylocalmoduleroot

    c) When publishing modules, we need to provide a git tag to be used as our module version.